deepdive {

  # #############
  # CONFIGURATION
  # #############
  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
  }

  # sampler binary for Mac
  # sampler.sampler_cmd: "util/dw_mac gibbs"
  sampler.sampler_args: "-l 1000 -s 1 -i 1000 --alpha 0.01"

  # ##############
  # FREE VARIABLES
  # ##############
  schema.variables {
    el_candidate_link.is_correct: Boolean
  }

  # ##########
  # Extractors
  # ##########
  extraction.extractors {

    ### ENTITY LINKING EXTRACTORS (1 for each rule)

    # Rule 1: everything is NIL by default (get all the mentions, and link them to NIL)
    everything_nil {
      before: ${APP_HOME}"/udf/util/clear_table.sh el_everything_nil"
      input: """
          SELECT DISTINCT m.id AS "mention.id",
                 e.id AS "canonical_entity.id"
            FROM mention AS "m",
                 canonical_entity AS "e"
            WHERE e.freebase_id = 'NIL0000'
        """
      output_relation: "el_everything_nil"
      udf: ${APP_HOME}"/udf/entity_linking/rules/round_1/pass_through_eid_mid_istrue.py"
      parallelism: ${PARALLELISM}
    }

    # Rule 2: exact string matching
    exact_str_match {
      before: ${APP_HOME}"/udf/util/clear_table.sh el_exact_str_match"
      input: """
          SELECT DISTINCT m.id AS "mention.id",
                 e.id AS "canonical_entity.id"
            FROM mention AS "m",
                 canonical_entity AS "e"
            WHERE e.text = m.text
        """
      output_relation: "el_exact_str_match"
      udf: ${APP_HOME}"/udf/entity_linking/rules/round_1/pass_through_eid_mid_istrue.py"
      parallelism: ${PARALLELISM}
    }

    # Rule 3: Wikipedia link (does the entity have a Wiki link with the same text as the mention?)
    wiki_link {
      before: ${APP_HOME}"/udf/util/clear_table.sh el_wiki_link"
      input: """
          SELECT DISTINCT m.id AS "mention.id",
                 e.id AS "canonical_entity.id"
            FROM mention AS "m",
                 canonical_entity AS "e",
                 entity_feature_wikilink AS "w"
            WHERE e.freebase_id = trim(w.eid1) AND
                  m.text = trim(w.featurevalue3)
        """
      output_relation: "el_wiki_link"
      udf: ${APP_HOME}"/udf/entity_linking/rules/round_1/pass_through_eid_mid_istrue.py"
      parallelism: ${PARALLELISM}
    }

    # Rule 4: Wikipedia redirect (does the entity have a Wiki redirect with the same text as the mention?)
    wiki_redirect {
      before: ${APP_HOME}"/udf/util/clear_table.sh el_wiki_redirect"
      input: """
          SELECT DISTINCT m.id AS "mention.id",
                 e.id AS "canonical_entity.id"
            FROM mention AS "m",
                 canonical_entity AS "e",
                 entity_feature_wikiredirect AS "w"
            WHERE e.freebase_id = trim(w.eid1) AND
                  m.text = trim(w.featurevalue2)
        """
      output_relation: "el_wiki_redirect"
      udf: ${APP_HOME}"/udf/entity_linking/rules/round_1/pass_through_eid_mid_istrue.py"
      parallelism: ${PARALLELISM}
    }

    # Rule 5: Top Bing result (if the top Bing result for the mention is the entity)
    top_bing_result {
      before: ${APP_HOME}"/udf/util/clear_table.sh el_top_bing_result"
      input: """
          SELECT DISTINCT m.id AS "mention.id",
                 e.id AS "canonical_entity.id"
            FROM mention AS "m",
                 canonical_entity AS "e",
                 entity_feature_bing_query AS "q",
                 asquery AS "a"
            WHERE m.mid = trim(a.mid1) AND
                  trim(q.query1) = trim(a.word3) AND
                  trim(q.rank3) = '1' AND
                  trim(q.eid2) = e.freebase_id
        """
      output_relation: "el_top_bing_result"
      udf: ${APP_HOME}"/udf/entity_linking/rules/round_1/pass_through_eid_mid_istrue.py"
      parallelism: ${PARALLELISM}
    }

    # Rule 6: Bing result (if the entity is a Bing result for the mention)
    bing_result {
      before: ${APP_HOME}"/udf/util/clear_table.sh el_bing_result"
      input: """
          SELECT DISTINCT m.id AS "mention.id",
                 e.id AS "canonical_entity.id"
            FROM mention AS "m",
                 canonical_entity AS "e",
                 entity_feature_bing_query AS "q",
                 asquery AS "a"
            WHERE m.mid = trim(a.mid1) AND
                  trim(q.query1) = trim(a.word3) AND
                  trim(q.rank3) IS NOT NULL AND
                  trim(q.eid2) = e.freebase_id
        """
      output_relation: "el_bing_result"
      udf: ${APP_HOME}"/udf/entity_linking/rules/round_1/pass_through_eid_mid_istrue.py"
      parallelism: ${PARALLELISM}
    }

    # Combine all of the rules into el_candidate_link
    el_round_1 {
      before: ${APP_HOME}"/udf/util/clear_table.sh el_candidate_link"
      input: """
          SELECT DISTINCT entity_id, mention_id
            FROM ( 
                (SELECT entity_id, mention_id FROM el_everything_nil)
              UNION
                (SELECT entity_id, mention_id FROM el_exact_str_match)
              UNION
                (SELECT entity_id, mention_id FROM el_wiki_link)
              UNION
                (SELECT entity_id, mention_id FROM el_wiki_redirect)
              UNION
                (SELECT entity_id, mention_id FROM el_top_bing_result)
              UNION
                (SELECT entity_id, mention_id FROM el_bing_result)
            ) AS t
        """
      output_relation: "el_candidate_link"
      udf: ${APP_HOME}"/udf/entity_linking/rules/round_1/combine_round_1_tables.py"
      parallelism: ${PARALLELISM}
      dependencies: ["everything_nil", "exact_str_match", "wiki_link", "wiki_redirect", "top_bing_result", "bing_result"]
    }


    ### FEATURES FOR MENTIONS (not used in current version but useful for improvements)

    mention_text_abbr {
      before: ${APP_HOME}"/udf/util/clear_table.sh mention_feature_text_abbreviation"
      input: """
          SELECT id AS "mention.id",
                 text AS "mention.text"
            FROM mention
        """
      output_relation: "mention_feature_text_abbreviation"
      udf: ${APP_HOME}"/udf/entity_linking/mention_features/mention_text_abbr.py"
      parallelism: ${PARALLELISM}
    }

    mention_text_lc {
      before: ${APP_HOME}"/udf/util/clear_table.sh mention_feature_text_lc"
      input: """
          SELECT id AS "mention.id",
                 text AS "mention.text"
            FROM mention
        """
      output_relation: "mention_feature_text_lc"
      udf: ${APP_HOME}"/udf/entity_linking/mention_features/mention_text_lc.py"
      parallelism: ${PARALLELISM}
    }

    mention_text_alpha {
      before: ${APP_HOME}"/udf/util/clear_table.sh mention_feature_text_alphanumeric"
      input: """
          SELECT id AS "mention.id",
                 text AS "mention.text"
            FROM mention
        """
      output_relation: "mention_feature_text_alphanumeric"
      udf: ${APP_HOME}"/udf/entity_linking/mention_features/mention_text_alpha.py"
      parallelism: ${PARALLELISM}
    }

    mention_text_alpha_lc {
      before: ${APP_HOME}"/udf/util/clear_table.sh mention_feature_text_alphanumeric_lc"
      input: """
          SELECT id AS "mention.id",
                 text AS "mention.text"
            FROM mention
        """
      output_relation: "mention_feature_text_alphanumeric_lc"
      udf: ${APP_HOME}"/udf/entity_linking/mention_features/mention_text_alpha_lc.py"
      parallelism: ${PARALLELISM}
    }

    mention_text_ngram1 {
      before: ${APP_HOME}"/udf/util/clear_table.sh mention_feature_text_ngram1"
      input: """
          SELECT id AS "mention.id",
                 text AS "mention.text"
            FROM mention
        """
      output_relation: "mention_feature_text_ngram1"
      udf: ${APP_HOME}"/udf/entity_linking/mention_features/mention_text_ngram1.py"
      parallelism: ${PARALLELISM}
    }

    mention_text_num_words {
      before: ${APP_HOME}"/udf/util/clear_table.sh mention_feature_text_num_words"
      input: """
          SELECT id AS "mention.id",
                 text AS "mention.text"
            FROM mention
        """
      output_relation: "mention_feature_text_num_words"
      udf: ${APP_HOME}"/udf/entity_linking/mention_features/mention_text_num_words.py"
      parallelism: ${PARALLELISM}
    }

  }


  # ###########
  # DEBUGGING
  # ###########
  pipeline.run: "debug"
  pipeline.pipelines.debug: [
    "everything_nil",
    "exact_str_match",
    "wiki_link",
    "wiki_redirect",
    "top_bing_result",
    "bing_result",
    "el_round_1",

    "rule_everything_nil",
    "rule_exact_str_match",
    "rule_wiki_link",
    "rule_wiki_redirect",
    "rule_top_bing_result",
    "rule_bing_result",
  ]


  # #######
  # FACTORS
  # #######
  inference.factors: {

    ####### RULES FOR ROUND 1

    # Rule 1: everything starts off as NIL
    rule_everything_nil {
      input_query: """
          SELECT DISTINCT link.is_correct AS "el_candidate_link.is_correct",
                 link.id AS "el_candidate_link.id"
            FROM el_candidate_link link,
                 el_everything_nil e
            WHERE link.entity_id = e.entity_id AND
                  link.mention_id = e.mention_id
        """
      function: "IsTrue(el_candidate_link.is_correct)"
      weight: 2.8
    }

    # Rule 2: exact string match
    rule_exact_str_match {
      input_query: """
          SELECT DISTINCT link.is_correct AS "el_candidate_link.is_correct",
                 link.id AS "el_candidate_link.id"
            FROM el_candidate_link link,
                 el_exact_str_match e
            WHERE link.entity_id = e.entity_id AND
                  link.mention_id = e.mention_id
        """
      function: "IsTrue(el_candidate_link.is_correct)"
      weight: 2
    }

    # Rule 3: Wikipedia link (does the entity have a Wiki link with the same text as the mention?)
    rule_wiki_link {
      input_query: """
          SELECT link.is_correct AS "el_candidate_link.is_correct",
                 link.id AS "el_candidate_link.id"
            FROM el_candidate_link link,
                 el_wiki_link e
            WHERE link.entity_id = e.entity_id AND
                  link.mention_id = e.mention_id
        """
      function: "IsTrue(el_candidate_link.is_correct)"
      weight: 2
    }

    # Rule 4: Wikipedia redirect (does the entity have a Wiki redirect with the same text as the mention?)
    rule_wiki_redirect {
      input_query: """
          SELECT link.is_correct AS "el_candidate_link.is_correct",
                 link.id AS "el_candidate_link.id"
            FROM el_candidate_link link,
                 el_wiki_redirect e
            WHERE link.entity_id = e.entity_id AND
                  link.mention_id = e.mention_id
        """
      function: "IsTrue(el_candidate_link.is_correct)"
      weight: 2
    }

    # Rule 5: Top Bing result (if the top Bing result for the mention is the entity)
    rule_top_bing_result {
      input_query: """
          SELECT link.is_correct AS "el_candidate_link.is_correct",
                 link.id AS "el_candidate_link.id"
            FROM el_candidate_link link,
                 el_top_bing_result e
            WHERE link.entity_id = e.entity_id AND
                  link.mention_id = e.mention_id
        """
      function: "IsTrue(el_candidate_link.is_correct)"
      weight: 1
    }

    # Rule 6: Bing result (if the entity is a Bing result for the mention)
    rule_bing_result {
      input_query: """
          SELECT link.is_correct AS "el_candidate_link.is_correct",
                 link.id AS "el_candidate_link.id"
            FROM el_candidate_link link,
                 el_bing_result e
            WHERE link.entity_id = e.entity_id AND
                  link.mention_id = e.mention_id
        """
      function: "IsTrue(el_candidate_link.is_correct)"
      weight: 2
    }

  }

  # ###########
  # CALIBRATION
  # ###########
  calibration.holdout_fraction: 0.0

}
